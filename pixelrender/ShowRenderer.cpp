//
//  ShowRenderer.cpp
//  pixelrender
//
//  Created by Derek Peterson on 3/7/15.
//  Copyright (c) 2015 Derek Peterson. All rights reserved.
//

#include "ShowRenderer.h"

#include "SwipeFX.h"
#include "FirelightFX.h"
#include <random>
#include <iostream>

// Global static pointer used to ensure a single instance of the class.
ShowRenderer* ShowRenderer::m_pInstance = NULL;

ShowRenderer* ShowRenderer::Instance()
{
    if (!m_pInstance)   // Only allow one instance of class to be generated.
        m_pInstance = new ShowRenderer();
    return m_pInstance;
}

ShowRenderer::ShowRenderer()
{
//    this->AddFX( new SwipeFX(
//                             RGBA( 255, 0, 255, 255 ),
//                             AABB(
//                                  Vector3d( 0, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -50, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 255, 0, 0, 255 ),
//                             AABB(
//                                  Vector3d( -150, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -200, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 255, 127, 0, 255 ),
//                             AABB(
//                                  Vector3d( -300, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -350, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 255, 0, 255 ),
//                             AABB(
//                                  Vector3d( -450, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -500, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 255, 255, 255 ),
//                             AABB(
//                                  Vector3d( -600, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -650, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 255, 255 ),
//                             AABB(
//                                  Vector3d( -750, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
//    
//    this->AddFX( new SwipeFX(
//                             RGBA( 0, 0, 0, 0 ),
//                             AABB(
//                                  Vector3d( -800, 0, 0 ),
//                                  Vector3d( -6, -15, -15 ),
//                                  Vector3d( 6, 15, 15 )
//                                  ),
//                             Vector3d( 100, 0, 0 ) ) );
    
//        this->AddFX( new FirelightFX(
//                                        AABB(
//                                             Vector3d( 0, 0, 0 ),
//                                             Vector3d( 0, -15, -15 ),
//                                             Vector3d( 200, 15, 15 )
//                                        ),
//                                        Vector3d( 0, 0, 0 ) ) );
    
    double events[768] = {0.580f, 1.007f, 1.418f, 1.823f, 2.228f, 2.633f, 3.039f, 3.432f, 3.837f, 4.255f, 4.661f, 5.066f, 5.471f, 5.878f, 6.282f, 6.687f, 7.094f, 7.499f, 7.903f, 8.311f, 8.716f, 9.121f, 9.526f, 9.929f, 10.336f, 10.742f, 11.148f, 11.555f, 11.960f, 12.365f, 12.770f, 13.174f, 13.579f, 13.984f, 14.391f, 14.797f, 15.202f, 15.608f, 16.015f, 16.419f, 16.823f, 17.228f, 17.634f, 18.039f, 18.445f, 18.850f, 19.255f, 19.661f, 20.066f, 20.471f, 20.876f, 21.283f, 21.689f, 22.094f, 22.500f, 22.906f, 23.311f, 23.716f, 24.121f, 24.525f, 24.930f, 25.337f, 25.744f, 26.150f, 26.555f, 26.957f, 27.362f, 27.768f, 28.175f, 28.581f, 28.986f, 29.389f, 29.794f, 30.200f, 30.607f, 31.013f, 31.418f, 31.823f, 32.229f, 32.636f, 33.041f, 33.444f, 33.849f, 34.255f, 34.662f, 35.068f, 35.471f, 35.863f, 36.267f, 36.686f, 37.095f, 37.500f, 37.905f, 38.310f, 38.715f, 39.120f, 39.525f, 39.930f, 40.337f, 40.744f, 41.147f, 41.552f, 41.958f, 42.365f, 42.770f, 43.175f, 43.581f, 43.986f, 44.391f, 44.796f, 45.201f, 45.607f, 46.012f, 46.417f, 46.820f, 47.225f, 47.634f, 48.042f, 48.448f, 48.850f, 49.254f, 49.660f, 50.065f, 50.473f, 50.879f, 51.281f, 51.685f, 52.093f, 52.503f, 52.908f, 53.310f, 53.719f, 54.137f, 54.539f, 54.933f, 55.333f, 55.716f, 56.123f, 56.539f, 56.951f, 57.366f, 57.771f, 58.178f, 58.582f, 58.992f, 59.394f, 59.806f, 60.231f, 60.652f, 61.041f, 61.439f, 61.842f, 62.229f, 62.636f, 63.041f, 63.443f, 63.848f, 64.253f, 64.657f, 65.065f, 65.472f, 65.875f, 66.278f, 66.686f, 67.093f, 67.498f, 67.904f, 68.310f, 68.714f, 69.119f, 69.525f, 69.930f, 70.336f, 70.742f, 71.147f, 71.551f, 71.956f, 72.362f, 72.767f, 73.173f, 73.580f, 73.985f, 74.389f, 74.794f, 75.201f, 75.607f, 76.013f, 76.417f, 76.820f, 77.228f, 77.634f, 78.036f, 78.440f, 78.846f, 79.254f, 79.660f, 80.065f, 80.472f, 80.877f, 81.281f, 81.688f, 82.094f, 82.499f, 82.904f, 83.309f, 83.714f, 84.119f, 84.521f, 84.879f, 85.238f, 85.645f, 86.073f, 86.510f, 86.937f, 87.359f, 87.770f, 88.172f, 88.577f, 88.985f, 89.387f, 89.786f, 90.195f, 90.610f, 91.015f, 91.414f, 91.819f, 92.230f, 92.636f, 93.031f, 93.436f, 93.848f, 94.253f, 94.659f, 95.065f, 95.472f, 95.878f, 96.284f, 96.688f, 97.088f, 97.495f, 97.900f, 98.306f, 98.714f, 99.119f, 99.524f, 99.929f, 100.333f, 100.738f, 101.143f, 101.551f, 101.954f, 102.359f, 102.767f, 103.171f, 103.577f, 103.978f, 104.384f, 104.796f, 105.199f, 105.601f, 106.008f, 106.416f, 106.818f, 107.221f, 107.629f, 108.037f, 108.443f, 108.851f, 109.256f, 109.653f, 110.055f, 110.465f, 110.856f, 111.260f, 111.684f, 112.093f, 112.496f, 112.901f, 113.308f, 113.714f, 114.117f, 114.521f, 114.927f, 115.335f, 115.738f, 116.140f, 116.548f, 116.955f, 117.359f, 117.769f, 118.175f, 118.579f, 118.983f, 119.382f, 119.786f, 120.192f, 120.596f, 120.998f, 121.404f, 121.816f, 122.225f, 122.633f, 123.037f, 123.434f, 123.844f, 124.254f, 124.658f, 125.066f, 125.472f, 125.878f, 126.283f, 126.688f, 127.094f, 127.499f, 127.903f, 128.302f, 128.711f, 129.119f, 129.515f, 129.916f, 130.329f, 130.737f, 131.139f, 131.550f, 131.956f, 132.361f, 132.766f, 133.172f, 133.577f, 133.983f, 134.390f, 134.795f, 135.200f, 135.603f, 136.008f, 136.414f, 136.818f, 137.218f, 137.626f, 138.037f, 138.442f, 138.847f, 139.253f, 139.658f, 140.063f, 140.468f, 140.873f, 141.279f, 141.685f, 142.090f, 142.494f, 142.859f, 143.195f, 143.518f, 143.965f, 144.476f, 144.908f, 145.331f, 145.740f, 146.146f, 146.551f, 146.956f, 147.361f, 147.766f, 148.174f, 148.580f, 148.984f, 149.388f, 149.795f, 150.200f, 150.605f, 151.010f, 151.416f, 151.822f, 152.227f, 152.633f, 153.038f, 153.443f, 153.848f, 154.253f, 154.659f, 155.066f, 155.472f, 155.675f, 0.363f, 0.798f, 1.216f, 1.620f, 2.026f, 2.429f, 2.836f, 3.242f, 3.622f, 4.052f, 4.458f, 4.865f, 5.268f, 5.674f, 6.081f, 6.484f, 6.891f, 7.297f, 7.700f, 8.107f, 8.516f, 8.916f, 9.326f, 9.726f, 10.133f, 10.539f, 10.945f, 11.352f, 11.758f, 12.161f, 12.568f, 12.971f, 13.378f, 13.781f, 14.187f, 14.594f, 15.000f, 15.404f, 15.813f, 16.216f, 16.623f, 17.023f, 17.432f, 17.836f, 18.242f, 18.649f, 19.052f, 19.458f, 19.865f, 20.268f, 20.674f, 21.078f, 21.487f, 21.891f, 22.297f, 22.703f, 23.110f, 23.513f, 23.919f, 24.323f, 24.726f, 25.133f, 25.542f, 25.945f, 26.355f, 26.755f, 27.159f, 27.565f, 27.971f, 28.378f, 28.784f, 29.187f, 29.591f, 29.997f, 30.404f, 30.810f, 31.216f, 31.620f, 32.026f, 32.432f, 32.839f, 33.242f, 33.646f, 34.052f, 34.458f, 34.865f, 35.271f, 35.672f, 36.055f, 36.479f, 36.894f, 37.297f, 37.703f, 38.107f, 38.513f, 38.917f, 39.323f, 39.726f, 40.133f, 40.542f, 40.945f, 41.349f, 41.755f, 42.162f, 42.568f, 42.971f, 43.378f, 43.784f, 44.188f, 44.594f, 44.997f, 45.404f, 45.810f, 46.214f, 46.620f, 47.020f, 47.430f, 47.839f, 48.245f, 48.652f, 49.049f, 49.459f, 49.862f, 50.268f, 50.678f, 51.081f, 51.482f, 51.888f, 52.297f, 52.709f, 53.107f, 53.513f, 53.925f, 54.349f, 54.729f, 55.136f, 55.531f, 55.902f, 56.343f, 56.735f, 57.168f, 57.565f, 57.977f, 58.378f, 58.787f, 59.196f, 59.591f, 60.021f, 60.442f, 60.862f, 61.219f, 61.658f, 62.026f, 62.433f, 62.839f, 63.242f, 63.643f, 64.052f, 64.453f, 64.862f, 65.268f, 65.675f, 66.075f, 66.482f, 66.891f, 67.294f, 67.701f, 68.107f, 68.513f, 68.914f, 69.323f, 69.727f, 70.133f, 70.539f, 70.946f, 71.349f, 71.753f, 72.159f, 72.565f, 72.969f, 73.378f, 73.781f, 74.188f, 74.591f, 74.998f, 75.404f, 75.810f, 76.217f, 76.617f, 77.023f, 77.433f, 77.836f, 78.237f, 78.643f, 79.049f, 79.459f, 79.862f, 80.268f, 80.675f, 81.078f, 81.485f, 81.891f, 82.297f, 82.701f, 83.107f, 83.511f, 83.917f, 84.320f, 84.721f, 85.037f, 85.438f, 85.853f, 86.294f, 86.727f, 87.147f, 87.571f, 87.969f, 88.375f, 88.779f, 89.191f, 89.583f, 89.989f, 90.401f, 90.819f, 91.211f, 91.617f, 92.021f, 92.439f, 92.833f, 93.228f, 93.643f, 94.052f, 94.453f, 94.865f, 95.266f, 95.678f, 96.078f, 96.491f, 96.885f, 97.292f, 97.698f, 98.101f, 98.511f, 98.917f, 99.320f, 99.727f, 100.130f, 100.537f, 100.940f, 101.346f, 101.756f, 102.153f, 102.565f, 102.969f, 103.372f, 103.782f, 104.173f, 104.594f, 104.998f, 105.401f, 105.802f, 106.214f, 106.617f, 107.018f, 107.424f, 107.833f, 108.240f, 108.646f, 109.055f, 109.456f, 109.851f, 110.260f, 110.669f, 111.044f, 111.476f, 111.891f, 112.295f, 112.698f, 113.104f, 113.511f, 113.917f, 114.318f, 114.724f, 115.130f, 115.540f, 115.937f, 116.344f, 116.753f, 117.156f, 117.563f, 117.975f, 118.375f, 118.782f, 119.185f, 119.580f, 119.992f, 120.393f, 120.799f, 121.197f, 121.612f, 122.021f, 122.430f, 122.836f, 123.237f, 123.632f, 124.056f, 124.453f, 124.862f, 125.269f, 125.675f, 126.081f, 126.485f, 126.891f, 127.298f, 127.701f, 128.104f, 128.499f, 128.923f, 129.315f, 129.715f, 130.116f, 130.543f, 130.932f, 131.347f, 131.753f, 132.159f, 132.563f, 132.969f, 133.375f, 133.779f, 134.188f, 134.592f, 134.998f, 135.401f, 135.805f, 136.211f, 136.618f, 137.018f, 137.419f, 137.834f, 138.240f, 138.643f, 139.050f, 139.456f, 139.860f, 140.266f, 140.669f, 141.076f, 141.482f, 141.888f, 142.292f, 142.695f, 143.023f, 143.366f, 143.671f, 144.260f, 144.692f, 145.125f, 145.537f, 145.943f, 146.350f, 146.753f, 147.159f, 147.563f, 147.969f, 148.378f, 148.782f, 149.185f, 149.592f, 149.998f, 150.401f, 150.808f, 151.211f, 151.620f, 152.024f, 152.430f, 152.837f, 153.240f, 153.646f, 154.050f, 154.456f, 154.863f, 155.269f, 155.675f};
    
    for (int i = 0; i < 767; i++ )
    {
        m_events[i] = events[i];
    }
    
    m_lastEvent = 0;
};

void ShowRenderer::Start()
{
    system( "killall -9 afplay" );
    system( "afplay /Users/derek/dev/sparknet/showData/legosong.mp3 > /dev/null 2>&1 &" );
    
    m_startTime = std::chrono::high_resolution_clock::now();
}

void ShowRenderer::Render( double i_dt)
{
    FrameBuffer* pFrameBuffer = FrameBuffer::Instance();
    
    double eventTime = m_events[m_lastEvent+1];
    auto now = std::chrono::high_resolution_clock::now();
    std::chrono::duration<double> time_span = std::chrono::duration_cast<std::chrono::duration<double>>(now - m_startTime);
    double elapsed = time_span.count();
    if ( elapsed >= eventTime )
    {
        std::cout << "Fire event." << std::endl;
        
        
        
        //if ( m_lastEvent % 2 == 0 )
        {
            double duration = m_events[m_lastEvent+3] - m_events[m_lastEvent+1];
            
            for ( int i = 0; i < pFrameBuffer->GetPixelCount(); i++ )
            {
                pFrameBuffer->GetPixelAt( i )->SetColor( RGBA( 255, 255, 255, 255 ) );
                pFrameBuffer->GetPixelAt( i )->FadeColor( RGBA( 0, 0, 0, 0 ), duration * 0.5f );
            }
        }
        m_lastEvent += 1;
        
//        this->AddFX( new SwipeFX(
//                                 RGBA( 255, 0, 255, 255 ),
//                                 AABB(
//                                      Vector3d( 0, 0, 0 ),
//                                      Vector3d( -3, -15, -15 ),
//                                      Vector3d( 3, 15, 15 )
//                                      ),
//                                 Vector3d( 200, 0, 0 ) ) );
//        this->AddFX( new SwipeFX(
//                                 RGBA( 0, 0, 0, 0 ),
//                                 AABB(
//                                      Vector3d( -10, 0, 0 ),
//                                      Vector3d( -3, -15, -15 ),
//                                      Vector3d( 3, 15, 15 )
//                                      ),
//                                 Vector3d( 200, 0, 0 ) ) );
    }
    
    for ( int i = 0; i < m_activeFX.size(); i++ )
    {
        m_activeFX[i]->Update( i_dt );
    }
    
    pFrameBuffer->Update( i_dt );
}

void ShowRenderer::AddFX( FX* i_fx )
{
    m_activeFX.push_back(i_fx);
}

void ShowRenderer::RemoveFX( FX* i_fx )
{
    FXVector::iterator position = std::find( m_activeFX.begin(), m_activeFX.end(), i_fx );
    if ( position != m_activeFX.end() )
        m_activeFX.erase( position );
}